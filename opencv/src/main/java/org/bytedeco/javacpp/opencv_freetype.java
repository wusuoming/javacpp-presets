// Targeted by JavaCPP version 1.4.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.javacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.opencv_core.*;
import static org.bytedeco.javacpp.opencv_imgproc.*;

public class opencv_freetype extends org.bytedeco.javacpp.presets.opencv_freetype {
    static { Loader.load(); }

// Parsed from <opencv2/freetype.hpp>

/*M///////////////////////////////////////////////////////////////////////////////////////
//
//  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.
//
//  By downloading, copying, installing or using the software you agree to this license.
//  If you do not agree to this license, do not download, install,
//  copy or use the software.
//
//
//                           License Agreement
//                For Open Source Computer Vision Library
//
// Copyright (C) 2000-2008, Intel Corporation, all rights reserved.
// Copyright (C) 2009-2012, Willow Garage Inc., all rights reserved.
// Third party copyrights are property of their respective owners.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
//   * Redistribution's of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//
//   * Redistribution's in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//
//   * The name of the copyright holders may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
//
// This software is provided by the copyright holders and contributors "as is" and
// any express or implied warranties, including, but not limited to, the implied
// warranties of merchantability and fitness for a particular purpose are disclaimed.
// In no event shall the Intel Corporation or contributors be liable for any direct,
// indirect, incidental, special, exemplary, or consequential damages
// (including, but not limited to, procurement of substitute goods or services;
// loss of use, data, or profits; or business interruption) however caused
// and on any theory of liability, whether in contract, strict liability,
// or tort (including negligence or otherwise) arising in any way out of
// the use of this software, even if advised of the possibility of such damage.
//
//M*/
//################################################################################
//
//                    Created by Kumataro
//
//################################################################################

// #ifndef _OPENCV_FREETYPE_H_
// #define _OPENCV_FREETYPE_H_
// #ifdef __cplusplus

// #include <opencv2/core.hpp>

/**
\defgroup freetype Drawing UTF-8 strings with freetype/harfbuzz
<p>
This modules is to draw UTF-8 strings with freetype/harfbuzz.
<p>
1. Install freetype2 and harfbuzz in your system.
2. Create FreeType2 instance with createFreeType2() function.
3. Load font file with loadFontData() function.
4. Draw text with putText() function.
<p>
- If thickness parameter is negative, drawing glyph is filled.
- If thickness parameter is positive, drawing glyph is outlined with thickness.
- If line_type parameter is 16(or CV_AA), drawing glyph is smooth.
<p>
*/
/** \addtogroup freetype
 *  \{ */
@Namespace("cv::freetype") public static class FreeType2 extends Algorithm {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FreeType2(Pointer p) { super(p); }

/** \brief Load font data.
<p>
The function loadFontData loads font data.
<p>
@param fontFileName FontFile Name
@param id face_index to select a font faces in a single file.
*/

    public native void loadFontData(@Str BytePointer fontFileName, int id);
    public native void loadFontData(@Str String fontFileName, int id);

/** \brief Set Split Number from Bezier-curve to line
<p>
The function setSplitNumber set the number of split points from bezier-curve to line.
If you want to draw large glyph, large is better.
If you want to draw small glyph, small is better.
<p>
@param num number of split points from bezier-curve to line
*/

    public native void setSplitNumber( int num );

/** \brief Draws a text string.
<p>
The function putText renders the specified text string in the image. Symbols that cannot be rendered using the specified font are replaced by "Tofu" or non-drawn.
<p>
@param img Image.
@param text Text string to be drawn.
@param org Bottom-left/Top-left corner of the text string in the image.
@param fontHeight Drawing font size by pixel unit.
@param color Text color.
@param thickness Thickness of the lines used to draw a text when negative, the glyph is filled. Otherwise, the glyph is drawn with this thickness.
@param line_type Line type. See the line for details.
@param bottomLeftOrigin When true, the image data origin is at the bottom-left corner. Otherwise, it is at the top-left corner.
*/

    public native void putText(
            @ByVal Mat img, @Str BytePointer text, @ByVal Point org,
            int fontHeight, @ByVal Scalar color,
            int thickness, int line_type, @Cast("bool") boolean bottomLeftOrigin
        );
    public native void putText(
            @ByVal Mat img, @Str String text, @ByVal Point org,
            int fontHeight, @ByVal Scalar color,
            int thickness, int line_type, @Cast("bool") boolean bottomLeftOrigin
        );
    public native void putText(
            @ByVal UMat img, @Str String text, @ByVal Point org,
            int fontHeight, @ByVal Scalar color,
            int thickness, int line_type, @Cast("bool") boolean bottomLeftOrigin
        );
    public native void putText(
            @ByVal UMat img, @Str BytePointer text, @ByVal Point org,
            int fontHeight, @ByVal Scalar color,
            int thickness, int line_type, @Cast("bool") boolean bottomLeftOrigin
        );
    public native void putText(
            @ByVal GpuMat img, @Str BytePointer text, @ByVal Point org,
            int fontHeight, @ByVal Scalar color,
            int thickness, int line_type, @Cast("bool") boolean bottomLeftOrigin
        );
    public native void putText(
            @ByVal GpuMat img, @Str String text, @ByVal Point org,
            int fontHeight, @ByVal Scalar color,
            int thickness, int line_type, @Cast("bool") boolean bottomLeftOrigin
        );

/** \brief Calculates the width and height of a text string.
<p>
The function getTextSize calculates and returns the approximate size of a box that contains the specified text.
That is, the following code renders some text, the tight box surrounding it, and the baseline: :
<pre>{@code
    String text = "Funny text inside the box";
    int fontHeight = 60;
    int thickness = -1;
    int linestyle = 8;

    Mat img(600, 800, CV_8UC3, Scalar::all(0));

    int baseline=0;

    cv::Ptr<cv::freetype::FreeType2> ft2;
    ft2 = cv::freetype::createFreeType2();
    ft2->loadFontData( "./mplus-1p-regular.ttf", 0 );

    Size textSize = ft2->getTextSize(text,
                                     fontHeight,
                                     thickness,
                                     &baseline);

    if(thickness > 0){
        baseline += thickness;
    }

    // center the text
    Point textOrg((img.cols - textSize.width) / 2,
                  (img.rows + textSize.height) / 2);

    // draw the box
    rectangle(img, textOrg + Point(0, baseline),
              textOrg + Point(textSize.width, -textSize.height),
              Scalar(0,255,0),1,8);

    // ... and the baseline first
    line(img, textOrg + Point(0, thickness),
         textOrg + Point(textSize.width, thickness),
         Scalar(0, 0, 255),1,8);

    // then put the text itself
    ft2->putText(img, text, textOrg, fontHeight,
                 Scalar::all(255), thickness, linestyle, true );
}</pre>
<p>
@param text Input text string.
@param fontHeight Drawing font size by pixel unit.
@param thickness Thickness of lines used to render the text. See putText for details.
@param [out] baseLine y-coordinate of the baseline relative to the bottom-most text
point.
@return The size of a box that contains the specified text.
<p>
@see cv::putText
 */
public native @ByVal Size getTextSize(@Str BytePointer text,
                            int fontHeight, int thickness,
                            IntPointer baseLine);
public native @ByVal Size getTextSize(@Str String text,
                            int fontHeight, int thickness,
                            IntBuffer baseLine);
public native @ByVal Size getTextSize(@Str BytePointer text,
                            int fontHeight, int thickness,
                            int[] baseLine);
public native @ByVal Size getTextSize(@Str String text,
                            int fontHeight, int thickness,
                            IntPointer baseLine);
public native @ByVal Size getTextSize(@Str BytePointer text,
                            int fontHeight, int thickness,
                            IntBuffer baseLine);
public native @ByVal Size getTextSize(@Str String text,
                            int fontHeight, int thickness,
                            int[] baseLine);

}

/** \brief Create FreeType2 Instance
<p>
The function createFreeType2 create instance to draw UTF-8 strings.
<p>
*/
    @Namespace("cv::freetype") public static native @Ptr FreeType2 createFreeType2();

/** \} */
  // namespace freetype

// #endif
// #endif


}
